{"ast":null,"code":"var _jsxFileName = \"C:\\\\WebDevelop\\\\MisProyectos\\\\Tienda\\\\lagenerica\\\\src\\\\Componentes\\\\Productos.js\",\n    _s = $RefreshSig$();\n\n/* import React, { Component } from \"react\"; */\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport DataTable from 'react-data-table-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Productos() {\n  _s();\n\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]); // process CSV data\n\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    const list = [];\n\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length == headers.length) {\n        const obj = {};\n\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] == '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"') d = d.substring(d.length - 2, 1);\n          }\n\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        } // eliminar las filas en blanco\n\n\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n\n      console.log(list);\n    } // preparar la lista de columnas a partir de las cabeceras\n\n\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c\n    }));\n    setData(list);\n    setColumns(columns);\n  }; // manejar la carga de archivos\n\n\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = evt => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, {\n        type: 'binary'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_csv(ws, {\n        header: 1\n      });\n      processData(data);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n  /* render() { */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Subir Archivo Productos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      pagination: true,\n      highlightOnHover: true,\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n  /* } */\n}\n\n_s(Productos, \"9IcVAfeXZVJa5ZMpC133tw16skE=\");\n\n_c = Productos;\nexport default Productos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Productos\");","map":{"version":3,"sources":["C:/WebDevelop/MisProyectos/Tienda/lagenerica/src/Componentes/Productos.js"],"names":["React","useState","XLSX","DataTable","Productos","columns","setColumns","data","setData","processData","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","console","log","map","c","name","selector","handleFileUpload","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","header","readAsBinaryString"],"mappings":"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","sourcesContent":["/* import React, { Component } from \"react\"; */\r\nimport React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport DataTable from 'react-data-table-component';\r\n\r\n\r\nfunction Productos() {\r\n    const[columns, setColumns] = useState([]);\r\n    const[data, setData] = useState([]);\r\n\r\n    // process CSV data\r\n    const processData = dataString => {\r\n        const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n        const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n\r\n        const list = [];\r\n        for (let i = 1; i < dataStringLines.length; i++) {\r\n            const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n            if (headers && row.length == headers.length) {\r\n                const obj = {};\r\n                for (let j = 0; j < headers.length; j++) {\r\n                    let d = row[j];\r\n                    if (d.length > 0) {\r\n                        if (d[0] == '\"')\r\n                            d = d.substring(1, d.length - 1);\r\n                        if (d[d.length - 1] == '\"')\r\n                            d = d.substring(d.length - 2, 1);\r\n                    }\r\n                    if (headers[j]) {\r\n                        obj[headers[j]] = d;\r\n                    }\r\n                }\r\n\r\n                // eliminar las filas en blanco\r\n                if (Object.values(obj).filter(x => x).length > 0) {\r\n                    list.push(obj);\r\n                }\r\n            }\r\n            console.log(list);\r\n        }\r\n\r\n        // preparar la lista de columnas a partir de las cabeceras\r\n        const columns = headers.map(c => ({\r\n            name: c,\r\n            selector: c,\r\n        }));\r\n\r\n        setData(list);\r\n        setColumns(columns);\r\n    }\r\n\r\n    // manejar la carga de archivos\r\n    const handleFileUpload = e => {\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            /* Parse data */\r\n            const bstr = evt.target.result;\r\n            const wb = XLSX.read(bstr, { type: 'binary' });\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n            processData(data);\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    }\r\n    /* render() { */\r\n        return(\r\n        <div>\r\n            <h3>Subir Archivo Productos</h3>\r\n            <input\r\n            type=\"file\"\r\n            accept=\".csv\"\r\n            onChange={handleFileUpload}/>\r\n            <DataTable\r\n            pagination\r\n            highlightOnHover\r\n            columns={columns}\r\n            data={data}\r\n            />\r\n        </div>\r\n        );\r\n    /* } */\r\n}\r\n\r\nexport default Productos;"]},"metadata":{},"sourceType":"module"}